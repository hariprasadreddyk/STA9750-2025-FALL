---
title: "Mini Project #01: Gourmet Cheeseburgers Across the Globe"
author: "Hariprasad Reddy Kotakondla"
date: "`r Sys.Date()`"
editor: visual
format:
  html:
    toc: true
    toc-location: right
---

------------------------------------------------------------------------

# Acquire Data

```{r}

if(!dir.exists(file.path("data", "mp01"))){
  dir.create(file.path("data", "mp01"), showWarnings=FALSE, recursive=TRUE)
}

GLOBAL_TOP_10_FILENAME <- file.path("data", "mp01", "global_top10_alltime.csv")

if(!file.exists(GLOBAL_TOP_10_FILENAME)){
  download.file("https://www.netflix.com/tudum/top10/data/all-weeks-global.tsv", 
                destfile=GLOBAL_TOP_10_FILENAME)
}

COUNTRY_TOP_10_FILENAME <- file.path("data", "mp01", "country_top10_alltime.csv")

if(!file.exists(COUNTRY_TOP_10_FILENAME)){
  download.file("https://www.netflix.com/tudum/top10/data/all-weeks-countries.tsv", 
                destfile=COUNTRY_TOP_10_FILENAME)
}
```

# Data Import and Preparation

```{r}
#| include: false
if(!require("tidyverse")) install.packages("tidyverse")
library(readr)
library(dplyr)
```

```{r}
GLOBAL_TOP_10 <- read_tsv(GLOBAL_TOP_10_FILENAME)
glimpse(GLOBAL_TOP_10)
```

## Treat N/A values in season_title

```{r}
GLOBAL_TOP_10 <- GLOBAL_TOP_10 |>
    mutate(season_title = if_else(season_title == "N/A", NA_character_, season_title))

glimpse(GLOBAL_TOP_10)
```

# Read country-level data, treating "N/A" as NA

```{r}
COUNTRY_TOP_10 <- read_tsv(COUNTRY_TOP_10_FILENAME, na = "N/A")
glimpse(COUNTRY_TOP_10)
  
```

# Initial Data Exploration

```{r}
library(DT)
GLOBAL_TOP_10 |> 
    head(n=20) |>
    datatable(options=list(searching=FALSE, info=FALSE))
```

## Formating Column names and Large numbers

```{r}
library(stringr)
format_titles <- function(df){
    colnames(df) <- str_replace_all(colnames(df), "_", " ") |> str_to_title()
    df
}

GLOBAL_TOP_10 |> 
    format_titles() |>
    head(n=20) |>
    datatable(options=list(searching=FALSE, info=FALSE)) |>
    formatRound(c('Weekly Hours Viewed', 'Weekly Views'))
```

## Remove unnecessary Columns

```{r}
GLOBAL_TOP_10 |> 
    select(-season_title) |>
    format_titles() |>
    head(n=20) |>
    datatable(options=list(searching=FALSE, info=FALSE)) |>
    formatRound(c('Weekly Hours Viewed', 'Weekly Views'))
```

## Showing runtime in minutes

```{r}
GLOBAL_TOP_10 |> 
    mutate(`runtime_(minutes)` = round(60 * runtime)) |>
    select(-season_title, 
           -runtime) |>
    format_titles() |>
    head(n=20) |>
    datatable(options=list(searching=FALSE, info=FALSE)) |>
    formatRound(c('Weekly Hours Viewed', 'Weekly Views'))
```

# Exploratory Data Analysis


```{r}
#| code-fold: true
#| code-summary: "Show code"
 
# How many different countries does Netflix operate in?
n_countries <- COUNTRY_TOP_10 |>
  distinct(country_name) |>
  nrow()
```

Netflix operates in **`r n_countries`** different countries according to the viewing history.



```{r}
#| code-fold: true
#| code-summary: "Show code"

# Which non-English-language film has spent the most cumulative weeks in the global top 10? How many weeks did it spend?
top_noneng_film <- GLOBAL_TOP_10 |>
  filter(category == "Films (Non-English)") |>
  group_by(show_title) |>
  summarise(cum_weeks = n(), .groups = "drop") |>
  arrange(desc(cum_weeks)) |>
  slice(1)

film_name_q2 <- top_noneng_film$show_title
weeks_q2 <- top_noneng_film$cum_weeks
```

The non-English film with the longest global Top 10 run is **`r film_name_q2`**, with **`r weeks_q2`** weeks.

```{r}
#| code-fold: true
#| code-summary: "Show code"
 
# What is the longest film (English or non-English) to have ever appeared in the Netflix global Top 10? How long is it in minutes?

longest_film <- GLOBAL_TOP_10 |>
  filter(str_detect(category, "^Films")) |>
  filter(!is.na(runtime)) |>
  mutate(runtime_minutes = round(60 * runtime)) |>
  arrange(desc(runtime_minutes)) |>
  slice(1)

film_name_q3 <- longest_film$show_title
runtime_q3 <- longest_film$runtime_minutes
```

The longest film is **`r film_name_q3`** at **`r runtime_q3`** minutes.


**\br Programs with the most total hours of global viewership:**

```{r}
#| code-fold: true
#| code-summary: "Show code"
 
# For each of the four categories, what program has the most total hours of global viewership?
  
library(DT)

top_by_category <- GLOBAL_TOP_10 |>
  mutate(program = if_else(str_detect(category, "^TV"),
                           paste0(show_title,
                                  if_else(is.na(season_title), "", paste0(" — ", season_title))),
                           show_title)) |>
  group_by(category, program) |>
  summarise(total_hours = sum(weekly_hours_viewed, na.rm = TRUE), .groups = "drop") |>
  arrange(category, desc(total_hours)) |>
  group_by(category) |>
  slice(1) |>
  ungroup() 

datatable(top_by_category,
          options = list(pageLength = 5, searching = FALSE, info = FALSE)) |>
  formatRound("total_hours", 0)

```


```{r}
#| code-fold: true
#| code-summary: "Show code"
 
#Which TV show had the longest run in a country’s Top 10? How long was this run and in what country did it occur?

longest_tv_run <- COUNTRY_TOP_10 |>
  filter(str_detect(category, "^TV")) |>
  arrange(country_name, show_title, season_title, week) |>
  group_by(country_name, show_title, season_title) |>
  mutate(gap_weeks = as.numeric(week - lag(week), units = "days") / 7,
         new_block = if_else(is.na(gap_weeks) | gap_weeks != 1, 1L, 0L),
         block_id  = cumsum(new_block)) |>
  group_by(country_name, show_title, season_title, block_id, .add = TRUE) |>
  summarise(streak_weeks = n(), .groups = "drop") |>
  arrange(desc(streak_weeks)) |>
  slice(1)

show_q5 <- longest_tv_run$show_title
season_q5 <- longest_tv_run$season_title
country_q5 <- longest_tv_run$country_name
weeks_q5 <- longest_tv_run$streak_weeks
```

The longest TV run is **`r show_q5`** *(`r season_q5`)* with **`r weeks_q5`** weeks in **`r country_q5`**.


```{r}
#| code-fold: true
#| code-summary: "Show code"
 
# Netflix provides over 200 weeks of service history for all but one country in our data set. Which country is this and when did Netflix cease operations in that country?

weeks_by_country <- COUNTRY_TOP_10 |>
  group_by(country_name) |>
  summarise(n_weeks = n_distinct(week), last_week = max(week), .groups = "drop") |>
  arrange(n_weeks)

exception_country <- weeks_by_country |> slice(1)

country_q6 <- exception_country$country_name
nweeks_q6 <- exception_country$n_weeks
lastweek_q6 <- exception_country$last_week
```

**`r country_q6`** has only **`r nweeks_q6`** weeks of history, ceasing by **`r lastweek_q6`**.


```{r}
#| code-fold: true
#| code-summary: "Show code"
 
# What is the total viewership of the TV show Squid Game?

squid_total_hours <- GLOBAL_TOP_10 |>
  filter(str_to_lower(show_title) == "squid game") |>
  summarise(total_hours = sum(weekly_hours_viewed, na.rm = TRUE)) |>
  pull(total_hours)
```

**Squid Game** has been watched for over **`r scales::comma(squid_total_hours)`** hours globally.


```{r}
#| code-fold: true
#| code-summary: "Show code"
 
# The movie Red Notice has a runtime of 1 hour and 58 minutes. Approximately how many views did it receive in 2021?

library(lubridate)
runtime_hours <- 118/60

red_notice_views_2021 <- GLOBAL_TOP_10 |>
  filter(show_title == "Red Notice", year(week) == 2021) |>
  summarise(total_hours_2021 = sum(weekly_hours_viewed, na.rm = TRUE)) |>
  mutate(approx_views_2021 = total_hours_2021 / runtime_hours)

views_q8 <- round(red_notice_views_2021$approx_views_2021)
```

**Red Notice** had approximately **`r scales::comma(views_q8)`** views in **2021**.


```{r}
#| code-fold: true
#| code-summary: "Show code"
 
# How many Films reached Number 1 in the US but did not originally debut there? That is, find films that first appeared on the Top 10 chart at, e.g., Number 4 but then became more popular and eventually hit Number 1? What is the most recent film to pull this off? 

us_films <- COUNTRY_TOP_10 |>
  mutate(week = as.Date(week)) |>
  filter(country_name == "United States", str_detect(category, "^Films"))

us_debut_and_peak <- us_films |>
  arrange(show_title, week) |>
  group_by(show_title) |>
  summarise(debut_week = min(week),
            debut_rank = weekly_rank[which.min(week)],
            ever_num1  = any(weekly_rank == 1),
            first_num1_week = ifelse(any(weekly_rank == 1),
                                     min(week[weekly_rank == 1]),
                                     as.Date(NA)),
            .groups = "drop") |>
  filter(ever_num1, debut_rank != 1)

n_films_us_not_debut1 <- nrow(us_debut_and_peak)

most_recent_us <- us_debut_and_peak |>
  arrange(desc(first_num1_week)) |>
  slice(1)

film_q9 <- most_recent_us$show_title
week_q9 <- most_recent_us$first_num1_week
debut_q9 <- most_recent_us$debut_rank

```

**`r n_films_us_not_debut1`** films reached #1 in the US after debuting below #1.  
The most recent was **`r film_q9`** on the week of **`r format(as.Date(week_q9, origin = "1970-01-01"), "%Y-%m-%d")`**.


```{r}
#| code-fold: true
#| code-summary: "Show code"
 
# Which TV show/season hit the top 10 in the most countries in its debut week? In how many countries did it chart?

debut_spread <- COUNTRY_TOP_10 |>
  filter(str_detect(category, "^TV")) |>
  group_by(show_title, season_title) |>
  summarise(debut_week = min(week), .groups = "drop") |>
  inner_join(COUNTRY_TOP_10, by = c("show_title", "season_title", "debut_week" = "week")) |>
  filter(str_detect(category, "^TV")) |>
  group_by(show_title, season_title, debut_week) |>
  summarise(n_countries = n_distinct(country_name), .groups = "drop") |>
  arrange(desc(n_countries)) |>
  slice(1)

show_q10 <- debut_spread$show_title
season_q10 <- debut_spread$season_title
ncountries_q10 <- debut_spread$n_countries
week_q10 <- debut_spread$debut_week
```

**`r show_q10`** **(`r season_q10`)** charted in **`r ncountries_q10`** countries in its debut week **(`r week_q10`)**.

# Press Releases

## Stranger Things Dominates Global Screens Ahead of Final Season

```{r}
#| code-fold: true
#| code-summary: "Show code"

library(dplyr)
library(stringr)

# Filter Stranger Things rows and make sure week is Date
st_global <- GLOBAL_TOP_10 |>
  filter(str_detect(show_title, "Stranger Things")) |>
  mutate(week = as.Date(week))

# 1. Total viewing hours
stranger_hours <- st_global |>
  summarise(total_hours = sum(weekly_hours_viewed, na.rm = TRUE)) |>
  pull(total_hours)

# 2. Distinct weeks in Global Top 10
stranger_weeks <- st_global |>
  summarise(total_weeks = n_distinct(week)) |>
  pull(total_weeks)

# 3. Distinct countries (using COUNTRY_TOP_10)
stranger_countries <- COUNTRY_TOP_10 |>
  filter(str_detect(show_title, "Stranger Things")) |>
  summarise(n_countries = n_distinct(country_name)) |>
  pull(n_countries)

# 4. Peak weekly hours and date
st_peak_row <- st_global |>
  slice_max(weekly_hours_viewed, n = 1, with_ties = FALSE)
stranger_peak_hours <- st_peak_row$weekly_hours_viewed
stranger_peak_week  <- st_peak_row$week

# 5. Weeks at #1 globally
stranger_weeks_num1 <- st_global |>
  summarise(num1_weeks = n_distinct(week[weekly_rank == 1])) |>
  pull(num1_weeks)

# 6. Number of distinct seasons in dataset
stranger_seasons <- st_global |>
  summarise(n_seasons = n_distinct(season_title, na.rm = TRUE)) |>
  pull(n_seasons)

# 7. Best rank achieved
stranger_best_rank <- st_global |>
  summarise(best_rank = min(weekly_rank, na.rm = TRUE)) |>
  pull(best_rank)

```

As Netflix prepares for the much-anticipated release of *Stranger Things* season 5 in late 2025, the franchise’s legacy already speaks for itself. Across all four previous seasons, audiences have logged more than **`r scales::comma(stranger_hours)`** hours of viewing globally. The series has demonstrated remarkable staying power, holding a position in the Global Top 10 for **`r stranger_weeks`** weeks and reaching viewers in over **`r stranger_countries`** countries.

At its peak, *Stranger Things* attracted over **`r scales::comma(stranger_peak_hours)`** viewing hours in a single week (the week of **`r format(stranger_peak_week, "%Y-%m-%d")`**), underscoring its event-level popularity. It has spent **`r stranger_weeks_num1`** weeks at the #1 spot globally and consistently ranked within the Top 10 across **`r stranger_seasons`** different seasons, with its best debut rank reaching #**`r stranger_best_rank`**.

What sets *Stranger Things* apart is not just its nostalgic 80s aesthetic or supernatural plotlines, but its ability to resonate with a broad international audience while competing head-to-head with other flagship Netflix series. Compared to major hits like *The Witcher* and *Wednesday*, *Stranger Things* stands out as a cultural phenomenon that has transcended borders and languages. With Hawkins’ last stand approaching, Netflix is positioning season 5 as one of the defining entertainment events of the decade, ensuring the series leaves behind both a commercial and cultural legacy.


------------------------------------------------------------------------

## Hindi-Language Originals Propel Netflix Growth in India

```{r}
#| code-fold: true
#| code-summary: "Show code"

library(dplyr)
library(stringr)

# Step 1: Titles that ranked in India (likely Hindi Originals)
hindi_india <- COUNTRY_TOP_10 |>
  filter(country_name == "India", str_detect(category, "Films|TV")) |>
  mutate(week = as.Date(week))

# List the most common titles (to help pick Hindi Originals)
top_hindi_titles <- hindi_india |>
  count(show_title, sort = TRUE)

# Step 2: Use GLOBAL_TOP_10 for hours
hindi_global <- GLOBAL_TOP_10 |>
  filter(show_title %in% top_hindi_titles$show_title) |>
  mutate(week = as.Date(week))

# Total global hours for those titles
hindi_hours <- hindi_global |>
  summarise(total_hours = sum(weekly_hours_viewed, na.rm = TRUE)) |>
  pull(total_hours)

# Number of distinct titles
hindi_titles <- n_distinct(hindi_global$show_title)

# Distinct weeks they appeared in India Top 10
hindi_weeks <- hindi_india |>
  filter(show_title %in% top_hindi_titles$show_title) |>
  summarise(total_weeks = n_distinct(week)) |>
  pull(total_weeks)

# Peak global week among Hindi titles
hindi_peak <- hindi_global |>
  slice_max(weekly_hours_viewed, n = 1, with_ties = FALSE)

hindi_peak_title <- hindi_peak$show_title
hindi_peak_hours <- hindi_peak$weekly_hours_viewed
hindi_peak_week  <- hindi_peak$week

```

Netflix’s growth in India has been fueled by **Hindi-language Originals** that resonate with local audiences.  
Together, these titles have generated over **`r scales::comma(hindi_hours)`** hours of global viewing time.  

In India, **`r hindi_titles`** distinct shows and films have appeared in the Top 10, for a combined **`r hindi_weeks`** weeks.  
The strongest performance came from *`r hindi_peak_title`*, which peaked at **`r scales::comma(hindi_peak_hours)`** hours of global viewing in the week of **`r format(hindi_peak_week, "%Y-%m-%d")`**.  

------------------------------------------------------------------------

## Films vs TV Shows: A Tale of Two Formats on Netflix

```{r}
#| code-fold: true
#| code-summary: "Show code"

library(dplyr)

# Ensure week is Date
global_data <- GLOBAL_TOP_10 |> mutate(week = as.Date(week))

# Aggregate by category
category_summary <- global_data |>
  group_by(category) |>
  summarise(
    total_hours = sum(weekly_hours_viewed, na.rm = TRUE),
    total_titles = n_distinct(show_title),
    total_weeks = n_distinct(week),
    .groups = "drop"
  )

# Extract Films vs TV numbers
film_hours <- category_summary$total_hours[category_summary$category == "Films (English)"]
tv_hours   <- category_summary$total_hours[category_summary$category == "TV (English)"]

film_titles <- category_summary$total_titles[category_summary$category == "Films (English)"]
tv_titles   <- category_summary$total_titles[category_summary$category == "TV (English)"]

film_weeks <- category_summary$total_weeks[category_summary$category == "Films (English)"]
tv_weeks   <- category_summary$total_weeks[category_summary$category == "TV (English)"]

# Biggest single title in Films
film_peak <- global_data |>
  filter(str_detect(category, "^Films")) |>
  group_by(show_title) |>
  summarise(total_hours = sum(weekly_hours_viewed, na.rm = TRUE), .groups = "drop") |>
  slice_max(total_hours, n = 1)

# Biggest single title in TV
tv_peak <- global_data |>
  filter(str_detect(category, "^TV")) |>
  group_by(show_title) |>
  summarise(total_hours = sum(weekly_hours_viewed, na.rm = TRUE), .groups = "drop") |>
  slice_max(total_hours, n = 1)

```


Netflix’s viewing data reveals two distinct but powerful consumption patterns:
Films have generated over **`r scales::comma(film_hours)`** hours globally across **`r film_titles`** titles and **`r film_weeks`** weeks on the charts. Leading the way is **`r film_peak$show_title`**, which drew the most cumulative viewing hours among films.

On the other hand, TV shows continue to dominate in overall engagement, with more than **`r scales::comma(tv_hours)`** hours watched across **`r tv_titles`** titles and **`r tv_weeks`** weeks in the Top 10. The clear standout is **`r tv_peak$show_title`**, which reigns as the single most-watched series.

This comparison underscores Netflix’s unique ability to succeed in both formats: films drive event-level spikes in viewership, while series sustain long-term audience engagement across multiple weeks and seasons. Together, they illustrate Netflix’s dual role as both a global box-office replacement and a traditional TV disruptor.


